The ID async node was a problem because of the delay I have in the messages from the insoles. 

I never had to deal with so much delay and a bunch of nodes needing different things fast didn't make it very easy. 

Right now I need to know where the foot is on a moment in time and what are the forces and torques on that foot. 

How we do that is that we get the force estimation from the moticon insoles which is being published from some good 100ms in the past. This comes from a python node that reads a protobuf message. From this we publish all the topics from the insole, but we dont use any of them. What we use is a combined CommonTimed message that has everything, we read it from a node called republisher_sync and that node does a bunch of things. It has a buffer of length 1 that republishes as a fixed rate that you can set (the resampled part) and it also loads an OpenSimRT filter to filter both forces and COP. The force has only one component and the COP has 2, but we filter everything. But this node is also synchronous. It reads an IK (normal CommonMessage, i don't remember), actually this is maybe important, maybe i messed it up. But here are only interested in the timestamp. Actually I need to check if this was not the problem all along, because maybe the IK filtered doesnt start publishing until later (the filter is not complete), so I lose some samples and this is the source of my delay. 

In any case, this magical republisher, which is maybe unnecessary, feeds another node (the id_async) that has a buffer for wrenches. We execute this node with a bit of time delay that comes form a single source subscriber IK type node. It is also a hack and very hard to understand what I wrote, but from that we have always IK ready and guaranteed that the tfs will be available, because we are running it with a mega delay. The tfs are quite fast, so this is probably not a issue. 

Now that I think about it, the new node may be setup improperly and it only works because I have hard coded delays to deal with the differences in time between filtered and unfiltered outputs. Well, This is on the todo list. 

The ID async node. 

So yeah, if I understood the problem correctly (in this is a big if), we need the delay from the IK because I will publish the COP tfs from the insole which are from some time in the past at the same time I have a newer IK situation happening. This is less than ideal and I need to delay everything for those tfs to be ready and know what is the difference between those measurements. So I will be working with past data stored in the TF buffer that is only concluded (I need a TF from the COP to the map. from map to calcaneous I get from IK and the human/robot_state_publisher and the COP to calcaneus will be the latest thing just now, but it is a transform that happened in the past). So this transformation needs to be backdated (and now republishers are doing this, one for each foot). The timestamp from the insole is stripped on the republishing process so setting a delay there doesnt do anything. This is needlessly convoluted and needs to be simplified. There is also no reason to use a filter in a cpp node, the python node can do everything, but it looks rather messy, I am more confident in my cpp spaghetti than python spaghetti. 

In any case, we just need enough delay (in the id_async) to account for the insole delays and to get the transforms ready then we can compute those. There is a way to zero the inputs from republisher look ar just a stick on the calcaneous to know if the TFs from IK are properly synchronized (here if you are reading from filtered or unfiltered IK they will be different, so make sure you are reading from the proper node. I need to fix this so that I don't spend more time on it in the future, but I still dont know how to). They don't match up perfectly because we are using forward tfs from the URDF model instead of properly publishing TFs from opensim. Another huge TODO. The human_state_publisher package was intended to do this, but it is on the backburner for now. 

So now we have an old wrench with old TFs and old IK, so everything can be computed. The ID will be past ID, so SO will also be delay by how much this was delayed, however SO is not really working right now. 

I guess the task now is to simplify. There is a bunch of needless things going on which are remnants of debugging. Those need to go. 

In the past I thought I could use the IK from unfiltered output to position the insoles, but this is only a small gain. Maybe the unfiltered insole input can be used and I can improve the output a bit by putting a small buffer in the insole node because the timestamps from the insoles are also not being used. I have the same problem in the XIMU node where I cant read it faster than 100 ms, because I am lacking a buffer. If I change consistently all the IK inputs I can probably do this and get a bit extra information (although at 400 Hz synchronization will be even more of a hassle). 

The greatest limiter of accuracy right now isn't speed of IK, but its accuracy. The optimizer is still less than perfect, so we should focus on that first. Making the calibration part more reasonable (and showing the calibrated IMUs) is the first on the big TODO projects. Then implement a better version of sinks and sources inside the opensimrt_core package and change every node to use that instead. labels should probably be a latched topic like camerainfo. Maybe I can make everything run on TFs instead, and then this whole IK business disappears and nodes only need to subscribe to 1 thing at most. This would be ideal, but I think I might need to change how TFs work to have the velocities and accelerations instead. I also dont really understand the inner workings of opensim or opensimrt for that matter to make this change, so this is a much longer in the future TODO. 

In the end this turned out to be a cathartic text. I will probably not read/find this in the future, but better to describe things while they are still fresh in my head. There is a roadmap on how this project will progress in this text as well, but like everything I do, it is very disorganized. This is what I need help the most right now I think. Organizing things. 


